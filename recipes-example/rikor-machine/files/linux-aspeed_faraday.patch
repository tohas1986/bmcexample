diff --git a/drivers/net/ethernet/faraday/ftgmac100.c b/drivers/net/ethernet/faraday/ftgmac100.c
index a4421f3..cde2ac2 100644
--- a/drivers/net/ethernet/faraday/ftgmac100.c
+++ b/drivers/net/ethernet/faraday/ftgmac100.c
@@ -120,7 +120,7 @@ struct ftgmac100 {
 		#define MEZZ_UNKNOWN    -1
 		#define MEZZ_MLX        0x01
 		#define MEZZ_BCM        0x02
-                #define MEZZ_INTEL      0x03
+		#define MEZZ_INTEL      0x03
 	unsigned int  powerup_prep_host_id;
 	struct completion ncsi_complete;
 
@@ -147,7 +147,6 @@ typedef struct ncsi_nl_msg_t {
 
 #define MAX_RESPONSE_PAYLOAD 128 /* maximum payload size*/
 typedef struct ncsi_nl_response {
-  unsigned char cmd;
   unsigned char payload_length;
   unsigned char msg_payload[MAX_RESPONSE_PAYLOAD];
 } NCSI_NL_RSP_T;
@@ -250,25 +249,9 @@ ftgmac_aen_worker(struct work_struct *work)
 	return;
 }
 
-static int get_netdevice_idx(char *name)
-{
-    int index = -1;
-
-    if (0 == strcmp("eth0", name))
-    {
-        index = 0;
-    }
-    else if (0 == strcmp("eth1", name))
-    {
-        index = 1;
-    }
-
-    return index;
-}
-
-static struct packet_type ptype_ncsi[2] __read_mostly = {
-    {.type = __constant_htons(ETH_P_NCSI), .dev = NULL, .func = Rx_NCSI},
-    {.type = __constant_htons(ETH_P_NCSI), .dev = NULL, .func = Rx_NCSI},
+static struct packet_type ptype_ncsi = {
+ .type = __constant_htons(ETH_P_NCSI),
+ .func = Rx_NCSI,
 };
 
 static int
@@ -812,6 +795,7 @@ void Get_Version_ID (struct net_device * dev)
   // Set mezz type based on IANA ID
 	// MLX IANA = 00 00 81 19
 	// Broadcom IANA = 00 00 11 3D
+	// Intel IANA = 00 00 01 57
   if (lp->NCSI_Respond.Payload_Data[32] == 0x00 && lp->NCSI_Respond.Payload_Data[33] == 0x00 &&
     lp->NCSI_Respond.Payload_Data[34] == 0x81 && lp->NCSI_Respond.Payload_Data[35] == 0x19) {
     lp->mezz_type = MEZZ_MLX;
@@ -820,11 +804,12 @@ void Get_Version_ID (struct net_device * dev)
     lp->NCSI_Respond.Payload_Data[34] == 0x11 && lp->NCSI_Respond.Payload_Data[35] == 0x3D) {
     lp->mezz_type = MEZZ_BCM;
     printk("NCSI: Mezz Vendor = Broadcom\n");
-  } else if ( lp->NCSI_Respond.Payload_Data[35] == 0x57 && lp->NCSI_Respond.Payload_Data[34] == 0x01 &&
-    lp->NCSI_Respond.Payload_Data[33] == 0x00 && lp->NCSI_Respond.Payload_Data[32] == 0x00 ) {
+  } else if (lp->NCSI_Respond.Payload_Data[32] == 0x00 && lp->NCSI_Respond.Payload_Data[33] == 0x00 &&
+    lp->NCSI_Respond.Payload_Data[34] == 0x01 && lp->NCSI_Respond.Payload_Data[35] == 0x57) {
     lp->mezz_type = MEZZ_INTEL;
-    printk("NCSI: Mezz Vendor = Intel\n"); 
-  } else {
+    printk("NCSI: Mezz Vendor = Intel\n");
+  }
+    else {
     lp->mezz_type = MEZZ_UNKNOWN;
     printk("NCSI error: Unknown Mezz Vendor!\n");
   }
@@ -923,52 +908,6 @@ void Enable_AEN (struct net_device * dev)
 	lp->Retry = 0;
 }
 
-void Get_MAC_Address_intel(struct net_device *dev)
-{
-  struct ftgmac100 *lp = netdev_priv(dev);
-  struct file *filp = NULL;
-  char path[64]={0};
-  char mac_addr[6] = {0x00,0x11,0x22,0x33,0x44,0x55};
-  char mac_addr_size = sizeof(mac_addr);
-  int ret = 0;
-  int i;
-  mm_segment_t fs;
-
-  fs = get_fs();
-  set_fs(KERNEL_DS);
-
-  sprintf(path, "/sys/class/i2c-dev/i2c-6/device/6-0054/eeprom");
-
-  filp = filp_open(path, O_RDONLY, 0);
-  if ( (NULL == filp) || IS_ERR(filp) )
-  {
-    printk("[%s]Cannot use an error file pointer to get the intel NIC MAC\n",__func__);
-    printk("Use the default MAC\n");
-  }
-  else
-  {
-    filp->f_pos = 0x1907;
-    vfs_read(filp, (char *)mac_addr, mac_addr_size, &filp->f_pos);
-  }
-
-  set_fs(fs);
-
-  if ( NULL != filp )
-  {
-    filp_close(filp, NULL);
-  }
-
-  printk("NCSI: MAC  ");
-  for (i = 0; i < 6; i++)
-      printk("%02X:", mac_addr[i]);
-
-  printk("\n");
-  memcpy(dev->dev_addr, mac_addr, mac_addr_size);
-  memcpy(lp->NCSI_Request.SA, mac_addr, mac_addr_size);
-
-  ftgmac100_set_mac(lp, dev->dev_addr);
-}
-
 void Get_MAC_Address_mlx(struct net_device * dev)
 {
 	struct ftgmac100 *lp = netdev_priv(dev);
@@ -1523,7 +1462,7 @@ static void ncsi_recv_msg_cb(struct sk_buff *skb)
   send_ncsi_cmd(dev, buf->channel_id, buf->cmd, buf->payload_length,
 	             buf->msg_payload,
 							 &(ncsi_nl_rsp.payload_length), &(ncsi_nl_rsp.msg_payload[0]));
-  ncsi_nl_rsp.cmd = buf->cmd;
+
 	msg_size = sizeof(NCSI_NL_RSP_T);
 	msg = (unsigned char *)&ncsi_nl_rsp;
 
@@ -2181,7 +2120,7 @@ void ncsi_start(struct net_device *dev) {
 	for (i = 0; i < 4; i++) {
 		// DeSelect_Package (dev, i);
 		// Package_Found = Select_Package (dev, i);
-    Package_Found = 1;
+    		Package_Found = 1;
 		if (Package_Found == 1) {
 			//AST2100/AST2050/AST1100 supports 1 slave only
 			priv->NCSI_Cap.Package_ID = i;
@@ -2206,7 +2145,7 @@ void ncsi_start(struct net_device *dev) {
         //TODO: This is an issue in  Get_Version_ID that always returns
         //mezz_type to be -1, so it only calls Get_MAC_Address_bcm.
         //It may need to work with Mlx to find a solution.
-#if defined(CONFIG_FBY2) || defined(CONFIG_YOSEMITE)    //For multi-host NIC initialization
+#if defined(CONFIG_FBY2)     //For multi-host NIC initialization
         // Try Mlx first
         Get_MAC_Address_mlx(dev);
         Set_MAC_Affinity_mlx(dev);
@@ -2229,14 +2168,10 @@ void ncsi_start(struct net_device *dev) {
         if (priv->mezz_type == MEZZ_MLX) {
           Get_MAC_Address_mlx(dev);
           Set_MAC_Affinity_mlx(dev);
-        } else if (priv->mezz_type == MEZZ_BCM ) {
-          Get_MAC_Address_bcm(dev);
-          mdelay(500);
         } else {
-          Get_MAC_Address_intel(dev);
+          Get_MAC_Address_bcm(dev);
           mdelay(500);
         }
-        
 #endif
 
 				Get_Capabilities(dev);
@@ -3305,7 +3240,6 @@ static int ftgmac100_open(struct net_device *netdev)
 {
 	struct ftgmac100 *priv = netdev_priv(netdev);
 	int err;
-        int idx;
 
 	err = ftgmac100_alloc_buffers(priv);
 	if (err) {
@@ -3340,9 +3274,9 @@ static int ftgmac100_open(struct net_device *netdev)
 	ftgmac100_start_hw(priv, 100);
 #elif defined(CONFIG_YAMP)
 	ftgmac100_start_hw(priv, 100);
-#elif defined(CONFIG_FBTTN)
+#elif defined(CONFIG_FBTTN) || defined(CONFIG_YOSEMITE)
 	ftgmac100_start_hw(priv, 100);
-#elif defined(CONFIG_FBY2)  || defined(CONFIG_YOSEMITE)
+#elif defined(CONFIG_FBY2)
 	ftgmac100_start_hw(priv, 100);
 #else
 	ftgmac100_start_hw(priv, 10);
@@ -3350,9 +3284,7 @@ static int ftgmac100_open(struct net_device *netdev)
 
 #ifdef CONFIG_FTGMAC100_NCSI
 	init_completion(&priv->ncsi_complete);
-        idx = get_netdevice_idx(netdev->name);
-        ptype_ncsi[idx].dev = netdev;
-	dev_add_pack(&ptype_ncsi[idx]);
+	dev_add_pack(&ptype_ncsi);
 #else
 	phy_config_led(priv->mii_bus);
 	phy_start(priv->phydev);
@@ -3382,7 +3314,7 @@ err_alloc:
 static int ftgmac100_stop(struct net_device *netdev)
 {
 	struct ftgmac100 *priv = netdev_priv(netdev);
-        
+
 	/* disable all interrupts */
 	iowrite32(0, priv->base + FTGMAC100_OFFSET_IER);
 
@@ -3391,9 +3323,7 @@ static int ftgmac100_stop(struct net_device *netdev)
 #ifndef CONFIG_FTGMAC100_NCSI
 	phy_stop(priv->phydev);
 #else
-	int idx;
-	idx = get_netdevice_idx(netdev->name);
-	dev_remove_pack(&ptype_ncsi[idx]);
+	dev_remove_pack(&ptype_ncsi);
 #endif
 
 	ftgmac100_stop_hw(priv);
